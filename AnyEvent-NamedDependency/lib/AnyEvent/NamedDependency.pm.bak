package AnyEvent::RegisteredWatcher;

use strict;
use warnings;

use AnyEvent;
use AnyEvent::Strict;
use Carp qw/croak cluck/;

sub new {
    my ($class, %args) = @_;

    return bless {
        dependencies => {},
        callbacks    => {},
        watchers     => {},
        delay_start  => $args{delay_start},
    }, ref $class || $class;
}

sub add {
    my ($self, %args) = @_;

    my $name       = $args{name};
    if (!defined $name) {
        croak "argument name must be passed to " . ref($self) . "->add()";
    }

    my $callback   = $args{callback};
    if (!defined $callback || ref $callback ne 'CODE') {
        croak "argument callback musst be passed to " . ref($self) . "->add() and must be a CODE ref";
    }

    my $dependency = $args{dependency}; # currently only supports one dependency
    if (!defined $dependency) {
        croak "argument dependency must be passed to " . ref($self) . "->add()";
    }

    # set/overwrite existing callback with name $name
    $self->{callbacks}->{$name}->{callback} = $callback;
    $self->{callbacks}->{$name}->{complete} = 0;
    $self->{callbacks}->{$name}->{returned} = undef;

    # add watchers and dependencies
    push @{$self->{dependencies}->{$dependency}}, $name;
    $self->{watchers}->{$name} = $dependency;

    if (!$self->{delay_start) {
        $self->start($name);
    }

    return;
}

sub start {
    my ($self, $name) = @_;

    # if $name is undefined, we want the loop to start, as this is the "starting" callback
    # if name is defined, but the dependency hasn't finished, we don't want to start
    if (defined $name && !$self->{callbacks}->{ $self->{watchers}->{$name} }->{complete}) {
        return;
    }

    # creating a watcher
    $self->{callbacks}->{$name}->{condvar}  = AnyEvent->condvar;
    $self->{callbacks}->{$name}->{condvar}->cb(sub {



        # capture the return values
        $self->{callbacks}->{$name}->{returned} = [
            $self->{callbacks}->{$name}->{callback}->(
                $self->{callbacks}->{ @{ $self->{watchers}->{$name} }->{returned} }
            )
        ];

# receive args = $self->{callbacks}->{$name}->{callback}->( # pass args );
# call send on all the watchers
    });

    # begin / end
    # definitely want to use being and end here, and a callback on the condvar to the dependencies on end
    # returns the waiting variable
    # possibly add parameter to pass back on ->send() call
    # destroy watchers when no longer interested in them?
}

sub retrieve_results {
    my ($self, $name) = @_;
}

sub wait {
    # maybe have this be the blocking operation until all events have finished (and begin/end pairs have completed)
    # user has requested it, go ahead and wait here
    # DON'T put a watcher anywhere else in the module
}

sub clear {
    # clear everything if no arg passed
    # clear specific dependecies, if array of dependency names is passed
}

sub _next_dependency {
    my ($self, $name) = @_;
    # check for anything waiting for $name
    # check that nothing else is currently waiting on name
    # execute, if so
    # check that there is nothing else to do at all, and ->send
}

1;

__DATA__

named conditions
adding
keeping the name of completed conditions around
once a set of queues with the same name is empty, call the callback for that, which then fires the subsequent set
registering callbacks to named callbacks see "$f1->cb (sub {" in AnyEvent::Intro

   sub request {

      # send the request to the server
      $handle->push_write (...);

      # push some response handlers
      $handle->push_read (...);
   }


# for incrementing and decrementing counter on conditional variable
$cv->begin ([group callback])
$cv->end


make sure to check ready before recv call to prevent IO blocking?
